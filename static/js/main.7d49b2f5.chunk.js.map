{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/Header/Header.js","Components/Header/index.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","prototype","PropTypes","string","isRequired","oneOfType","arrayOf","node","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","default","length","substring","HomePresenter","nowPlaying","popular","upcoming","error","loading","Helmet","Loader","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","a","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","Header","li","List","ul","Item","current","SLink","Link","withRouter","pathname","location","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","console","log","path","exact","component","Home","TV","Search","Detail","from","GlobalStyles","createGlobalStyle","reset","App","Router","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d49b2f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.034804ce.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child){\r\n        margin-bottom:50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size:14px;\r\n    font-weight: 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top: 25px;\r\n    display:grid;\r\n    grid-template-columns: repeat(auto-fill, 125px);\r\n    grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\n\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    height:100vh;\r\n    width:100vw;\r\n    display:flex;\r\n    justify-content: center;\r\n    font-size: 28px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">\r\n            ⏰\r\n        </span>\r\n    </Container>\r\n);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    display:flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color: ${props => props.color};\r\n    font-weight: 600;\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n    <Container>\r\n        <Text color={color}>\r\n            {text}\r\n        </Text>\r\n    </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n    background-image: url(${props => props.bgUrl});\r\n    height: 180px;\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position: center center;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    bottom:5px;\r\n    right:5px;\r\n    position: absolute;\r\n    opacity: 0;\r\n    transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    margin-bottom: 5px;\r\n    position: relative;\r\n    &:hover{\r\n        ${Image}{\r\n            opacity: 0.3;\r\n        }\r\n        ${Rating}{\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    display: block;\r\n    font-size: 12px;\r\n    margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size: 10px;\r\n    color:rgba(255,255,255,0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/tv/${id}`}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n                    : require(\"../assets/noPosterSmall.png\").default} />\r\n                <Rating>\r\n                    <span role=\"img\" aria-label=\"rating\">\r\n                        ⭐\r\n                    </span>{\" \"}\r\n                    {rating}/10\r\n                </Rating>\r\n            </ImageContainer>\r\n            <Title>\r\n                {title.length > 18 ?\r\n                    `${title.substring(0, 18)}...`\r\n                    : title}\r\n            </Title>\r\n            <Year>{year}</Year>\r\n        </Container>\r\n    </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding:20px;\r\n    padding-top: 20px;\r\n`;\r\n\r\n\r\nconst HomePresenter = ({ nowPlaying, popular, upcoming, error, loading }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>Movies | Nomflix</title>\r\n        </Helmet>\r\n\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <Container>\r\n                <Helmet>\r\n                    <title>Movies | Nomflix</title>\r\n                </Helmet>\r\n                {nowPlaying && nowPlaying.length > 0 && (\r\n                    <Section title=\"Now Playing\">\r\n                        {nowPlaying.map\r\n                            (movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            ))}\r\n                    </Section>\r\n                )}\r\n                {upcoming && upcoming.length > 0 && (\r\n                    <Section title=\"Upcoming movies\">\r\n                        {upcoming.map\r\n                            (movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            ))}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular movies\">\r\n                        {popular.map\r\n                            (movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            ))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>\r\n        )}\r\n    </>\r\n);\r\n\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    upcoming: PropTypes.array,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\",\r\n    params: {\r\n        \"api_key\": \"f419005b168808321bcc27b142e72e91\",\r\n        \"language\": \"en-US\"\r\n    }\r\n});\r\n\r\nexport const moviesApi = {\r\n    nowPlaying: () => api.get(\"movie/now_playing\"),\r\n    upcoming: () => api.get(\"movie/upcoming\"),\r\n    popular: () => api.get(\"movie/popular\"),\r\n    movieDetail: id => api.get(`movie/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    search: term => api.get(\"search/movie\", {\r\n        params: {\r\n            query: encodeURIComponent(term)\r\n        }\r\n    })//\r\n}\r\n\r\nexport const tvApi = {\r\n    topRated: () => api.get(\"tv/top_rated\"),\r\n    popular: () => api.get(\"tv/popular\"),\r\n    airingToday: () => api.get(\"tv/airing_today\"),\r\n    showDetail: id => api.get(`tv/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    search: term => api.get(\"search/tv\", {\r\n        params: {\r\n            query: encodeURIComponent(term)\r\n        }\r\n    })\r\n}","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        upcoming: null,\r\n        popular: null,\r\n        error: null,\r\n        loading: true\r\n    };\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: nowPlaying }\r\n            } = await moviesApi.nowPlaying();\r\n            const { data: { results: upcoming }\r\n            } = await moviesApi.upcoming();\r\n            const { data: { results: popular }\r\n            } = await moviesApi.popular();\r\n            this.setState({\r\n                nowPlaying,\r\n                upcoming,\r\n                popular\r\n            });\r\n        } catch {\r\n            this.setState({\r\n                error: \"Cant find movie information.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { nowPlaying, popular, upcoming, error, loading } = this.state;\r\n        //console.log(this.state);\r\n        return (\r\n            <HomePresenter\r\n                nowPlaying={nowPlaying}\r\n                popular={popular}\r\n                upcoming={upcoming}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>\r\n                TV Shows | Nomflix\r\n            </title>\r\n        </Helmet>\r\n        {loading ? (\r\n            <Loader />\r\n        ) : (\r\n            <Container>\r\n                {topRated && topRated.length > 0 && (\r\n                    <Section title=\"Top Rated Shows\">\r\n                        {topRated.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {popular && popular.length > 0 && (\r\n                    <Section title=\"Popular Shows\">\r\n                        {popular.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {airingToday && airingToday.length > 0 && (\r\n                    <Section title=\"AiringToday Shows\">\r\n                        {airingToday.map(show => (\r\n                            <Poster\r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n            </Container>\r\n        )}\r\n    </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n    topRated: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    airingToday: PropTypes.array,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        loading: true,\r\n        error: null\r\n    };\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: topRated }\r\n            } = await tvApi.topRated();\r\n            const { data: { results: popular }\r\n            } = await tvApi.popular();\r\n            const { data: { results: airingToday }\r\n            } = await tvApi.airingToday();\r\n            this.setState({\r\n                topRated,\r\n                popular,\r\n                airingToday\r\n            })\r\n        } catch {\r\n            this.setState({\r\n                error: \"Cant find TV information.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { topRated, popular, airingToday, loading, error } = this.state\r\n        return (\r\n            <TVPresenter\r\n                topRated={topRated}\r\n                popular={popular}\r\n                airingToday={airingToday}\r\n                loading={loading}\r\n                error={error}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Section from \"../../Components/Section\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom: 50px;\r\n    width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all: unset;\r\n    font-size: 28px;\r\n    width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n    movieResults,\r\n    tvResults,\r\n    loading,\r\n    error,\r\n    searchTerm,\r\n    handleSubmit,\r\n    updateTerm\r\n}) => (\r\n    <Container>\r\n        <Helmet>\r\n            <title>\r\n                Search | Nomflix\r\n            </title>\r\n        </Helmet>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input placeholder=\"Search Movies or TV Shows...\"\r\n                value={searchTerm}\r\n                onChange={updateTerm}></Input>\r\n        </Form>\r\n        {\r\n            loading ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    {movieResults && movieResults.length > 0 && (\r\n                        <Section title=\"Movie Results\">\r\n                            {movieResults.map(movie => (\r\n                                <Poster\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    imageUrl={movie.poster_path}\r\n                                    title={movie.original_title}\r\n                                    rating={movie.vote_average}\r\n                                    year={movie.release_date && movie.release_date.substring(0, 4)}\r\n                                    isMovie={true}\r\n                                />\r\n                            ))}\r\n                        </Section>\r\n                    )}\r\n                    {tvResults && tvResults.length > 0 && (\r\n                        <Section title=\"Show Results\">\r\n                            {tvResults.map(show => (\r\n                                <Poster\r\n                                    key={show.id}\r\n                                    id={show.id}\r\n                                    imageUrl={show.poster_path}\r\n                                    title={show.original_name}\r\n                                    rating={show.vote_average}\r\n                                    year={show.first_air_date && show.first_air_date.substring(0, 4)}\r\n                                />\r\n                            ))}\r\n                        </Section>\r\n                    )}\r\n                    {error && <Message color=\"#e74c3c\" text={error} />}\r\n                    {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0\r\n                        && <Message text=\"Nothing found\" color=\"#95a5a6\"></Message>}\r\n                </>\r\n            )\r\n        }\r\n    </Container>\r\n);\r\nSearchPresenter.propTypes = {\r\n    movieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    searchTerm: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import { moviesApi, tvApi } from \"api\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SearchPresenter from \"./SearchPresenter\"\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        movieResults: null,\r\n        tvResults: null,\r\n        searchTerm: \"\",\r\n        loading: false,\r\n        error: null\r\n    };\r\n\r\n    // componentDidMount() {\r\n    //     this.handleSubmit();\r\n    // };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { searchTerm } = this.state;\r\n        if (searchTerm !== \"\") {\r\n            this.searchByTerm();\r\n        }\r\n    };\r\n\r\n    updateTerm = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n        this.setState({\r\n            searchTerm: value\r\n        });\r\n    }\r\n\r\n    searchByTerm = async () => {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ loading: true });\r\n        try {\r\n            const {\r\n                data: { results: movieResults }\r\n            } = await moviesApi.search(searchTerm);\r\n            const {\r\n                data: { results: tvResults }\r\n            } = await tvApi.search(searchTerm);\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            });\r\n        } catch {\r\n            this.setState({ error: \"Can't find results\" });\r\n        } finally {\r\n            this.setState({ loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { movieResults, tvResults, searchTerm, loading, error } = this.state\r\n        return (\r\n            <SearchPresenter\r\n                movieResults={movieResults}\r\n                tvResults={tvResults}\r\n                searchTerm={searchTerm}\r\n                loading={loading}\r\n                error={error}\r\n                handleSubmit={this.handleSubmit}\r\n                updateTerm={this.updateTerm}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.li`\r\n    color: white;\r\n    position: fixed;\r\n    top:0;\r\n    left:0;\r\n    width: 100%;\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: rgba(20, 20, 20, 0.8);\r\n    box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);   \r\n`;\r\n\r\nconst List = styled.ul`\r\n    display:flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n    width: 80px;\r\n    height: 50px;\r\n    text-align: center;\r\n    border-bottom: 5px solid ${props => props.current ? \"#3498db\" : \"transparent\"};\r\n    transition: border-bottom 0.5s ease-in-out;\r\n`\r\n\r\nconst SLink = styled(Link)`\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n    <Header>\r\n\r\n        <List>\r\n            <Item current={pathname === \"/\"}>\r\n                <SLink to=\"/\">\r\n                    Movies\r\n                </SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/tv\"}>\r\n                <SLink to=\"/tv\">\r\n                    TV\r\n                </SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/search\"}>\r\n                <SLink to=\"/search\">\r\n                    Search\r\n                </SLink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n));","import Header from \"./Header\";\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { Helmet } from \"react-helmet\";\r\nimport Loader from \"../../Components/Loader\";\r\n\r\n//유투브 동영상\r\n//영화사\r\n//internet movie database로 이동 탭으로\r\n// 1.Youtube Videos\r\n// 2. IMDB ID: imdb_id\r\n// 3. production_companies: logo_path\r\n// 4. countries or languages\r\n\r\nconst Container = styled.div`\r\n    height:calc(100vh - 50px);\r\n    width: 100%;\r\n    position:relative;\r\n    padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position: center center;\r\n    background-size: cover;\r\n    filter: blur(3px);\r\n    opacity: 0.5;\r\n    z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    position: relative;\r\n    z-index: 1;\r\n    height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n    width: 30%;\r\n    background-image: url(${props => props.bgImage});\r\n    background-position: center center;\r\n    background-size: cover;\r\n    height: 100%;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n    width:70%;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    font-size : 32px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n    margin:20px 0;\r\n`;\r\n\r\nconst Item = styled.span`\r\n\r\n`;\r\n\r\nconst Divider = styled.span`\r\n    margin:0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    font-size: 12px;\r\n    opacity: 0.7;\r\n    line-height: 2;\r\n    width: 50%;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n    loading ? (\r\n        <>\r\n            <Helmet>\r\n                <title>\r\n                    Loading | Nomflix\r\n                </title>\r\n            </Helmet>\r\n            <Loader />\r\n        </>\r\n        \r\n    ) : (\r\n            <Container>\r\n                <Helmet>\r\n                    <title>\r\n                            {result.original_title\r\n                                ? result.original_title\r\n                                : result.original_name} | Nomflix\r\n                    </title>\r\n                </Helmet>\r\n            <Backdrop bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} />\r\n\r\n            <Content>\r\n                <Cover bgImage={result.poster_path\r\n                    ? `https://image.tmdb.org/t/p/original${result.poster_path}`\r\n                    : require(\"../../assets/noPosterSmall.png\")} />\r\n                <Data>\r\n                    <Title>{result.original_title ? result.original_title : result.original_name}</Title>\r\n                    <ItemContainer>\r\n                        <Item>\r\n                            {result.release_date ? result.release_date.substring(0, 4) : result.first_air_date.substring(0, 4)}\r\n                        </Item>\r\n                        <Divider>ㆍ</Divider>\r\n                        <Item>\r\n                            {result.runtime ? result.runtime : result.episode_run_time[0]} min\r\n                        </Item>\r\n                        <Divider>ㆍ</Divider>\r\n                        <Item>\r\n                            {result.genres\r\n                                && result.genres.map((genre, index) =>\r\n                                    index === result.genres.length - 1\r\n                                        ? genre.name\r\n                                        : `${genre.name} / `\r\n                                )}\r\n                        </Item>\r\n                    </ItemContainer>\r\n                    <Overview>{result.overview}</Overview>\r\n                </Data>\r\n            </Content>\r\n        </Container>\r\n    );\r\n<Loader />\r\n\r\nDetailPresenter.propTypes = {\r\n    result: PropTypes.object,\r\n    loading: PropTypes.bool.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import { moviesApi, tvApi } from \"api\";\r\nimport React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\"\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const {\r\n            location: { pathname }\r\n        } = props;\r\n        this.state = {\r\n            result: null,\r\n            error: null,\r\n            loading: true,\r\n            isMovie: pathname.includes(\"/movie/\")\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        const { match:\r\n            {\r\n                params: { id }\r\n            },\r\n            history: { push }\r\n        } = this.props;\r\n        const { isMovie } = this.state;\r\n        const parsedId = parseInt(id);\r\n        if (isNaN(parsedId)) {\r\n            return push(\"/\");\r\n        }\r\n        let result = null;\r\n        try {\r\n            if (isMovie) {\r\n                ({\r\n                    data: result\r\n                } = await moviesApi.movieDetail(parsedId));\r\n            }\r\n            else {\r\n                ({\r\n                    data: result\r\n                } = await tvApi.showDetail(parsedId));\r\n            }\r\n            console.log(result);\r\n        } catch {\r\n            this.setState({ error: \"Can't find anything\" });\r\n        } finally {\r\n            this.setState({ loading: false, result })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { result, error, loading } = this.state;\r\n        console.log(result);\r\n        return (\r\n            <DetailPresenter\r\n                result={result}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Search from \"Routes/Search\";\r\nimport Header from \"./Header\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\n//HashRouter\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Home} />\r\n                <Route path=\"/tv\" exact component={TV} />\r\n                <Route path=\"/search\" component={Search} />\r\n                <Route path=\"/movie/:id\" component={Detail} />\r\n                <Route path=\"/tv/:id\" component={Detail} />\r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </Switch>\r\n        </>\r\n    </Router>\r\n);","import { createGlobalStyle } from \"styled-components\"\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:--apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20, 20, 20, 1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;","import React, { Component } from \"react\";\r\nimport Router from \"Components/Router\";\r\nimport GlobalStyles from \"Components/GlobalStyles\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Router />\r\n        <GlobalStyles />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'Components/App';\r\nimport \"./api\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}